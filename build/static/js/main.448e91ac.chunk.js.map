{"version":3,"sources":["logo.svg","utils/util.js","Component/StarDisplay.js","Component/PlayAgain.js","Hooks/useGameState.js","Game.js","StarMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","StarNumber","props","maxNumber","map","starId","className","key","PlayAgain","style","color","gameStatus","onClick","useGameState","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","Game","startNewGame","StarDisplay","numberId","StartMatch","gameId","setGameId","App","StarMatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.448e91ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = Utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[Utils.random(0, sums.length - 1)];\r\n    },\r\n\r\n        // Color Theme\r\n     colors: {\r\n            available: 'lightgray',\r\n            used: 'lightgreen',\r\n            wrong: 'lightcoral',\r\n            candidate: 'deepskyblue',\r\n        },\r\n    \r\n};\r\n\r\n\r\n\r\nexport default Utils;","import React from 'react';\r\nimport Utils from './../utils/util'\r\n\r\nconst  StarNumber = (props) =>(\r\n    <>\r\n        {Utils.range(1, props.maxNumber).map(starId =>\r\n                        <div className=\"star\" key={starId} />\r\n                    )}\r\n    </>\r\n)\r\n\r\nexport default StarNumber;","import React from 'react';\r\n\r\nconst PlayAgain = props => (\r\n\r\n        <div className=\"game-done\">\r\n            <div className=\"message\"\r\n            style={{color: props.gameStatus === 'lost'?'red':'green'}}>\r\n                {props.gameStatus==='lost' ? 'Game Over' : 'Nice!'}\r\n            </div>\r\n            <button onClick={props.onClick}>Play Again</button>\r\n        </div>\r\n\r\n)\r\nexport default PlayAgain;","import React,{useState,useEffect} from 'react';\r\nimport Utils from './../utils/util'\r\n\r\n//function useGameState(){\r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(Utils.random(1, 9));\r\n    //candidateNums\r\n    //wrongNums is not recommended to use numbers wrongs to the state because\r\n    //          it will be changed by another containers. Example: usedNums\r\n    //          Don't put in the state anything that could be computed by the\r\n    //          from the otherthings that you have in the state\r\n    //usedNums\r\n    //availableNums\r\n\r\n    const [availableNums, setAvailableNums] = useState(Utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    //setInterval, setTimeout\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timerId)\r\n        }\r\n    });\r\n\r\n    const setGameState = (newCandidateNums) => {\r\n        if (Utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums)\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n\r\n            setStars(Utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n    return {stars, availableNums,candidateNums, secondsLeft,setGameState};\r\n\r\n}\r\n\r\nexport default useGameState;","import React, { useState, useEffect } from 'react';\r\nimport Number from './Component/NumberComponent'\r\nimport StarDisplay from './Component/StarDisplay';\r\nimport PlayAgain from './Component/PlayAgain';\r\nimport useGameState from   './Hooks/useGameState'\r\nimport Utils from './utils/util';\r\n\r\n\r\nconst Game = (props) => {\r\n    //const [stars, setStars] = useState(Utils.random(1, 9));\r\n    //candidateNums\r\n    //wrongNums is not recommended to use numbers wrongs to the state because\r\n    //          it will be changed by another containers. Example: usedNums\r\n    //          Don't put in the state anything that could be computed by the\r\n    //          from the otherthings that you have in the state\r\n    //usedNums\r\n    //availableNums\r\n\r\n    // const [availableNums, setAvailableNums] = useState(Utils.range(1, 9));\r\n    // const [candidateNums, setCandidateNums] = useState([]);\r\n    // const [secondsLeft, setSecondsLeft] = useState(10);\r\n    // //setInterval, setTimeout\r\n    // useEffect(() => {\r\n    //     if (secondsLeft > 0 && availableNums.length > 0) {\r\n    //         const timerId = setTimeout(() => {\r\n    //             setSecondsLeft(secondsLeft - 1);\r\n    //         }, 1000);\r\n    //         return () => clearTimeout(timerId)\r\n    //     }\r\n    // });\r\n    const {stars,\r\n            availableNums,\r\n            candidateNums,\r\n            secondsLeft,\r\n            setGameState} = useGameState();\r\n\r\n    const candidatesWrong = Utils.sum(candidateNums) > stars;\r\n    // const gameIsDone = availableNums.length === 0;\r\n    // const gameIsLost = secondsLeft === 0;\r\n    const gameStatus = availableNums.length === 0\r\n    ? 'won'\r\n    :secondsLeft === 0 ? 'lost': 'active';\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available'\r\n\r\n    }\r\n\r\n    // const resetGame = () => {\r\n    //     setStars(Utils.random(1, 9));\r\n    //     setAvailableNums(Utils.range(1, 9));\r\n    //     setCandidateNums([]);\r\n    // }\r\n\r\n    const onNumberclick = (number, currentStatus) => {\r\n        //currentStatus => newStatus\r\n\r\n        if (gameStatus !== 'active' || currentStatus == 'used') { return; }\r\n\r\n        const newCandidateNums =\r\n            currentStatus === 'available'\r\n                ? candidateNums.concat(number)\r\n                : candidateNums.filter(cn => cn !== number)\r\n\r\n        setGameState(newCandidateNums);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameStatus !== 'active' ? (\r\n                        <PlayAgain onClick={props.startNewGame} gameStatus = {gameStatus}  />\r\n                    )\r\n                        : (<StarDisplay maxNumber={stars} />)}\r\n                </div>\r\n                <div className=\"right\">\r\n                    {Utils.range(1, 9).map(numberId =>\r\n                        /**\r\n                         * We need to send to Number Components the information about the\r\n                         * state numbers used and candidates. We don't need to send all numbers\r\n                         * only a boolean to check if the number is used or candidate\r\n                         */\r\n                        <Number\r\n                            key={numberId}\r\n                            status={numberStatus(numberId)}\r\n                            numberId={numberId}\r\n                            onClick={onNumberclick} />\r\n                    )}\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// Math science\r\n\r\nexport default Game;","import React,{useState} from 'react';\r\nimport Game from './Game';\r\n\r\nconst StartMatch = () =>{\r\n    const [gameId,setGameId] = useState(1);\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId +1)}\r\n    />\r\n}\r\n\r\nexport default StartMatch;","import React, { useState } from 'react';\nimport StarMatch from './StarMatch'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [gameId,setGameId] = useState(1);\n  return (\n    <div className=\"App\" >\n        <StarMatch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}